1.渐变
  1.什么是渐变
    渐变指定是多种颜色平缓变换的一种显示效果。
  2.渐变的主要因素
    1.色标：一种颜色及其出现的位置
    2.一个渐变是由多个色标组成（至少两个）
  3.渐变分类
    1.线性渐变
      以直线的方向来填充效果
    2.径向渐变
      以圆形的方式来实现填充
    3.重复渐变
      将线性渐变或径向渐变 重复几次实现填充
  4.渐变详解
    1.线性渐变
      属性：background-image
      取值：linear-gradient(angle,color-point1,color-point2,....);
        1.angle
	  表示渐变填充的方向或角度
	  取值：
	    1.关键字
	      to top 从下向上填充渐变色
	      to bottom 从上向下填充渐变色
	      to left 从右向左填充渐变色
	      to right 从左向右填充渐变色
	    2.角度值
	     0deg 从下向上填充，等同于to top
	     90deg 从左向右填充，等同于to right
	     180deg 从上到下填充，等同于to bottom
	     270deg 从右向左填充，等同于to left
        2.color-point
	  色标：颜色 及其 位置
	  取值：颜色 以及 位置的组合，中间用空格分开
	  ex:
	    1.red 0%
	      在填充方向的开始位置处颜色为红色
	    2.green 50%
	      到填充方向一半的位置处，颜色变为绿色
	    3.blue 200px
	      到填充方向的200px的位置处，颜色变为蓝色
    2.径向渐变
      属性：
      background-image:radial-gradient([size at position],color-point1,color-point2,...);
      size at position: 
          size:半径，以px为单位的数值
	  position:圆心所在位置
	       1.x y 具体数值
	       2.x% y% 元素宽和高的占比
	       3.关键字
	         x:left,center,right
		 y:top,center,bottom
      ex：
        100px at right top 
	半径     右上角位置
    3.重复渐变
      1.重复线性渐变
        background-image:repeating-linear-gradient(angle,color-point1,color-point2,...);
	color-point:位置一定要给绝对数值（px）,不要用相对单位%
      2.重复径向渐变
        background-image:repeating-radial-gradient([size at position],color-point1,color-point2,...);
      练习：
         设置两个div元素高宽各300*300，第一个div用重复线性渐变，第二个div用重复径向渐变填充
  5.浏览器兼容性
    各个浏览器的新版本都支持渐变属性
    对于不支持的浏览器版本，可以通过增加浏览器前缀的方式，让浏览器支持渐变属性
    Firefox:-moz-
    Chrome & Sagari:-webkit-
    Opera:-o-
    IE:-ms-
2.文本格式化属性
  1.字体属性
    1.指定字体
      属性：font-family
      取值：字体名称，名称之间用逗号隔开
      ex：
      font-family:"微软雅黑",Arial,"黑体";
    2.字体大小
      属性：font-size
      取值：以px或pt为单位的数字
    3.字体加粗
      属性：font-weight
      取值：
         1.bold 加粗（b,hn）
	 2.normal 正常
	 3.value 无单位的数字（整百倍）
	   400-900
	   400：等同于normal
	   900：等同于bold
    4.字体样式
      属性：font-style
      取值：
         1.normal 正常显示 
	 2.italic 斜体显示
    5.小型大写字母
       将小写字符变成大写，但文本的大小与小写字符一致
       属性：font-variant
       取值：
          1.normal 正常
	  2.small-caps 小型的大写字符
    6.字体属性简写
      属性：font
      取值：style variant weight size family;
      注意：
        如果用简写方式，必须设置family的值，否则无效。
	font:12px; 错误
	font:12px "黑体"; 正确

      练习：
        创建一个div，并设置id为d1,内容随意,设置文本样式如下：
	    1.字体：微软雅黑
	    2.文字大小为24px
	    3.加粗显示文本并且为斜体
	    4.将所有的小写字符变为小型大写字符
  2.文本格式
    1.文本颜色
      属性：color
      取值：合法的颜色值
    2.文本排列
      作用：指定文本，行内，行内块元素的水平对齐方式。
      属性：text-align
      取值：left/center/right/justify(两端对齐)
    3.文字修饰（线条）
      属性：text-decoration
      取值：
        none:无任何线条修饰
	underline:下划线修饰
	overline:上划线修饰
        line-through:删除线修饰
    4.行高
      作用:定义一行文本的高度
      特点：如果行高的高度大于字体本身的大小，那么该行文本将在指定的行高内呈现垂直居中的效果。
      属性:line-height
      取值：以px为单位数值
    5.首行文本缩进
      属性：text-indent
      取值：以px为单位的数值
    6.文本阴影
      属性：text-shadow
      取值：h-shadow v-shadow blur color;

      练习：
        在文本属性的练习基础上，增加以下样式：
	   1.文本的排列方式为两端对齐
	   2.当鼠标悬停时，文字出现下划线
	   3.要求首行文本缩进32px
	   4.增加文本阴影：水平，垂直偏移为0，模糊距离为5px,颜色为蓝色
3.表格
  1.表格的常用属性
    1.边距属性：padding
    2.边框属性：border
    3.尺寸属性：width,height
    4.文本格式化属性：font-*,text-*,line-height
    5.背景属性：颜色，图片，渐变
    6.vertical-align
      作用：指定单元格数据垂直对齐方式
      取值：
         top:上对齐
	 middle:居中对齐
	 bottom:下对齐
     练习：创建网页，并在网页中添加表格
         1.表格尺寸为400*400，4行4列;
	 2.每个单元格的尺寸为100*100,内容随意;
	 3.设置表格和单位元格的边框为1px solid #000;
	 4.设置每个单元格的左内边距为20px;
	 5.尝试为每个单元格增加上外边距15px。
  2.表格的特殊属性
    1.边框合并
      取值：border-collapse
      取值：
         1.separate
	   默认值，即分离边框模式
	 2.collapse
	   边框合并
    2.边框边距
      作用：设置单元格之间或单元格与表格之间的距离
      属性：border-spacing
      取值：
        1.给定一个值：水平和垂直的间距相同
	2.给两个值：
	  第一个值 表示水平间距
	  第二个值 表示垂直间距
	注意：只有在边框分离模式下，边框边距才有效果，即border-collapse:separate时，border-spacing才有效。
        
  3.表格标题位置
    属性：caption-side
    取值：
        1.top:默认值，标题在表格内容之上
	2.bottom:标题在表格内容之下
     练习：
       在前面练习基础上，给表格添加一个标题“表-1”，显示在表格下方。
  4.显示规则
    作用：用来帮助浏览器指定如何布局一张表，也就是指定td尺寸的计算方式。
    属性：table-layout
    取值：
       1.auto
         默认值，即自动布局表格，列的尺寸实际上由内容来决定的。
       2.fixed
         固定表格布局，列的尺寸由设置的值为准
    自动表格布局VS固定表格布局：
        1.自动表格布局
	  1.单元格的大小会适应内容
	  2.表格复杂时，加载速度较慢（缺点）
	  3.自动表格布局会比较灵活（优点）
	  4.适用于不确定每列大小时使用
        2.固定表格布局
	  1.单元格的尺寸取决于设定的值
	  2.任何情况下都会加载显示表格（优点）
	  3.适用于确定每列大小时使用
	  4.固定表格布局不够灵活（缺点）
4.定位-浮动定位
  1.定位
    定位：指的是改变元素在页面中的默认位置
  2.定位的分类
    按照定位的效果，可以分成以下几类：
       1.普通流定位（默认的定位方式）
       2.浮动定位
       3.相对定位
       4.绝对定位
       5.固定定位
  3.定位详解
    1.普通流定位
      又称为文档流定位，页面中元素的默认定位方式
      1.每个元素在页面中都有自己的空间
      2.每个元素默认都是在其父元素的左上角开始显示
      3.页面中的块级元素都是从上往下排列，每个元素独占一行
      4.页面中的行内元素以及行内块都是按照从左到右的顺序来排列的

      要解决的问题：让多个块级元素在一行中显示
    2.浮动定位
      1.什么是浮动&特点
        1.元素一旦浮动起来，将不占据页面空间（脱离了文档流），其它未浮动元素将上前补位。
	2.浮动元素会停靠在父元素的左边或右边，或其它已经浮动的元素的边缘上。
	3.浮动定位解决的问题：能够让多个块级元素在一行中显示。
      2.语法
        属性：float
	取值：
	   1.left
	     左浮动，让元素停靠在父元素的左边或挨着左侧已经浮动的元素
	   2.right
	     右浮动，让元素停靠在父元素的右边或挨着右侧已经浮动的元素
	   3.none
	     默认值，即无任何浮动效果
	  练习：
	    1.创建三个div元素，id分别为d1,d2,d3,尺寸都为200*200，分别设置背景颜色
	    2.依次让d1,d2,d3实现右浮动，观察效果
	    3.将步骤2注销，依次让d1,d2,d3,实现左浮动，观察效果

	 课后作业：完成css-Day04文件夹中“课后作业.png"头部效果


        
      
  
   
      



      