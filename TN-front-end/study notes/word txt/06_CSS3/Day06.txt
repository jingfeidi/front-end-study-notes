CCS3 Core
 1.复杂选择器
   1.兄弟选择器
     兄弟元素：具备相同父元素的平级元素之间称为兄弟元素。
     1.相邻兄弟选择器
       作用：获取紧紧挨在某元素后的兄弟元素
       语法：选择器1+选择器2{}
       注意：兄弟选择器，只能向后找，不能向前找

     2.通用兄弟选择器
       作用：获取某元素后所有满足条件的兄弟元素
       语法：选择器1~选择器2{}
     练习：
        <h3>静夜思</h3>
	<div>窗前明月光</div>
	<div>疑是地上霜</div>
	<div>举头望明月</div>
	<div>低头思故乡</div>
	通过兄弟选择器设置如下：
	   1.h3与div之间有30px的外边距
	   2.从第二div开始，每个div都有10px的上外边距
   2.属性选择器
     <input type="text" name="uname" value="" placeholder="">
     1.作用
       允许通过元素所附带的属性及其值来匹配元素
       type="text"
     2.语法
       1.基本语法
         [attr]  //属性
	 作用：匹配页面中所有附带attr属性的元素
	 ex：
	   1.[id] 匹配页面中所有附带id属性的元素
	   2.[class] 匹配页面中所有附带class属性的元素
       2.elem[attr]
         elem:表示任意元素
	 attr:表示任意属性
	 作用：匹配页面中所有附带attr属性的elem元素
	 ex:
	   div[id] 匹配页面中所有带有id属性的div元素
	   input[type] 匹配页面中所有带有type属性的input元素
	   .text[placeholder] 匹配页面中所有带有placeholder属性，并有text类选择器的元素
       3.[attr1][attr2]
         作用：匹配同时附带多个属性的元素
	 ex:
	   div[id][class]
       4.[attr=value]
         作用：匹配attr属性值为value的元素
	 ex:
	   <input type="text">
	   <input type="password">

        //匹配的是第一个input元素(以下三种写法均可)
	   input[type="text"] 
	   input[type=text]
	   input[type='text']
   3.伪类选择器
     1.已学过的伪类
       链接伪类： 
         :link(尚未访问)  :visited(访问过的)
       动态伪类： 
         :hover(鼠标悬停) 
	 :active(激活状态)
	 :focus(获取焦点)
     2.目标伪类
       作用：突出显示活动的HTML锚点元素，匹配被激活的锚点。
       语法：
         选择器:target{...}
	 div:target{...}
	 #d1:target{...}
      练习：
        完成如果所示效果
     3.结构伪类
      作用：通过元素的结构关系来匹配元素（上下级嵌套结构）
       1.:first-child
        匹配的元素属于其父元素的第一个子元素
	<div>
	   <p>p1</p>
	   <p>p2</p>
	   <p>p3</p>
	</div>
	ex：
	  p:first-child{...} //找父元素的第一个子p元素(p1)
	
       2.:last-child
        匹配的元素是属于其父元素的最后一个子元素
        ex:
         p:last-child{...}//找父元素的最后一个子元素（p3）
        练习：
        创建一个4*4的表格，尺寸400*100，并填充内容
        1.设置第一行数据的背景颜色为黄色
        2.设置最后一行数据的背景颜色为红色
      
       3.:nth-child(n)
         匹配的元素是属于其父元素中第n个子元素
         table tr:nth-child(2) 匹配表格第二行数据
         练习：
          把第二行的第三列背景颜色改为blue
       4.:empty
        匹配没有子元素的元素
	<div></div>
       5.:only-child
        匹配的元素是属于其父元素中的唯一子元素
	<div>
	  <p id="p1">ppppp1</p>
	</div>

	<div>
	  <p id="p2">ppppppppp2</p>
	  <span>ssssssss</span>
	</div>

	p:only-child{color:red;}//改变的是p1的颜色

     4.否定伪类
      将满足指定选择器的元素给排除出去（不要了，排除）
      语法：
         :not(selector)
       ex:
	 table tr:not(:first-child){
	   font-size:24px;
	 }
         除第一行以外所有行的文字大小变为24px
       练习：
         设置每行中第一个列以外的所有列文字以加粗和斜体的方式显示。 
   4.伪元素选择器
     1.:first-letter或::first-letter
       作用：匹配某个元素的首字符
     2.:first-line 或::first-line
       作用：匹配某个元素的首行（第一行）

       注意：首行与首字符冲突时，以首字符为准
     3.::selection
       匹配被用户选取的内容
       注意：只能修改文本颜色或背景颜色
      练习：
       1.创建一个div元素，id为d1,内容随意
       2.将d1中首字符设置为加粗，红色，大小为20pt
       3.将d1中的首行文本设置为蓝色，斜体
       4.将用户选取的内容设置为红色背景，黄色文字
 2.内容生成
   1.什么是内容生成
     使用CSS动态的向某元素中插入一段内容
   2.伪元素选择器
     1.:before或::before
       作用：匹配到某元素的内容区域之前
       <p>(:before)鹅鹅鹅</p>
     2.:after或::after
       作用：匹配到某元素的内容区域之后
       <p>锄禾日当午(:after)</p>
     3.属性
       属性：content
       作用：向匹配到的位置处增加内容
       取值：
           1.字符串：用""引起来（普通文本）
	   2.url()：生成一副图像
      练习：
       <p>学而时习之，不亦说乎</p>
       <p>有朋自远方来，不亦乐乎</p>

       输出：
        子曰：学而时习之，不亦说乎
	-摘自《论语》

	子曰：有朋自远方来，不亦乐乎
	-摘自《论语》
     4.解决问题
       1.解决浮动问题
         div:after{
	   content:"";
	   display:block;
	   clear:both;
	 }
       2.子元素上外边距溢出问题
         div:before{
	   content:"";
	   display:table;
	 }
     课后作业：
      创建一个4*4的表格，尺寸400*200，并填充内容
       1.设置第二行数据的背景颜色为黄色
       2.设置第三行数据的背景颜色为红色
       3.设置第四行第四列背景颜色为蓝色
       4.设置每行除最后一列的所有文字大小变为24px并加粗
         

     
      
    
       

     
