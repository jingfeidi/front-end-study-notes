1.数组的使用
  取值和赋值操作都使用  数组名[下标]
  1.为数组赋值
    数组名[下标]=值;
    取值：
    数组名[下标]
    ex:
     var names=["小红","小明","小强"];
     names[0]="铁扇公主";
     console.log(names);
  2.获取数组的长度
    数组的长度：数组中元素的个数
    属性：length
    语法：数组名.length
  3.配合循环，遍历数组中的每一个元素
    for(var i=0;i<names.length;i++){
       i:表示每个元素的下标
       names[i]:每个元素
    }
  4.length表示数组中即将要插入的元素的下标
    var names=["小红","小明","小强"];
    names[names.length]="范冰冰";

    练习：不停的从弹出框中录入员工姓名，将所有录入的姓名保存在一个数组中（names）,直到输入exit为止,在控制台打印数组中所有的元素。
2.关联数组
  php:$array=["names"=>"suwukong"]; 与js中不一致
  以字符串作为元素下标的数组，就是关联数组
  以数字作为下标的数组，就是索引数组
  在js中的关联数组：
      var array=[];
      array["字符串下标"]=值;
      ex：
        array["西游记"]="古代神话故事";
	array["红楼梦"]=["贾宝玉","林黛玉","刘姥姥"];
  注意：
    1.关联数组中，字符串下标的内容是不记录到length中
    2.只能通过字符串做下标取数组中的值
3.for...in
  遍历出任意数组中的字符串下标以及索引下标
  语法：
     for(var 变量 in 数组){
        //变量：字符串下标 或 索引下标
	//取值：数组名[下标]
     }
     练习：定义出一个关联数组，然后遍历出数组中的内容，并在控制台打印
4.冒泡排序
  1.什么是冒泡排序
    排序算法的一种，将一组数据进行排序，小的数字往前排，大的数字往后排。
     var arr=[23,9,78,6,45];
     往后越比次数越少
     5个数字 比较4轮
     6个数字 比较5轮
     10个数字 比较9轮 
    ...

    特点：
       1.n个数字，则比较n-1次(外层循环)
         for(var i=1;i<arr.length;i++)
       2.轮数增加，比较次数减少(内层循环)
         for(var j=0;j<arr.length-i;j++){
	    if(arr[j]>arr[j+1])
	      //交换arr[j]和arr[j+1]的位置
	 }
       3.嵌套循环解决冒泡排序的问题
5.数组的常用方法
    1.toString()
      作用：将一个数组转换为字符串，并返回转换后的结果
      语法：var str=数组对象.toString();
    2.join()
      作用：将数组的元素通过指定的字符连接到一起，并返回连接后的字符串
      语法：var res=数组对象.join("指定的字符");
      ex:
        var arr=["吕布","西施","东施","小乔"];
	用#连接 
	var res=arr.join("#");
	console.log(res);
      练习：
         1.使用数组实现由*组成的三角形
	    *
	    **
	    ***
	    ****
	    *****
    3.concat()
      作用：拼接两个或者更多的数组，并返回拼接后的结果
      语法：var res=数组对象.concat(数组1,数组2,...)
     注意：
      1.concat不会改变原有数组，而是返回拼接以后的结果
      2.要拼接的数据可以是数组，也可以是普通数据
     练习：
      声明两个数组分别存放一些国家的名字
      数组1：大国
         l=["中国","美国","俄罗斯"];
      数组s：小国
         s=["阿富汗","日本","韩国"];
      将小国全部移入到大国的数组中，打印输出。
    4.slice()
      作用：截取子数组，从指定的数组中，截取几个链接的元素组成一个新的数组
      语法：var arr=数组名.slice(start,[end]);
         start:从哪个下标位置处开始截取，取值为正，从前向后算，取值为负，从后向前算。
                0      1      2        3
     var arr=["中国","美国","俄罗斯","加拿大"];
               -4     -3      -2       -1
         end:指定结束位置处的下标（不包含）,该参数可以省略，如果省略的话，就是从start开始一直截取到尾
      注意：
	 该函数不会影响现有数组，会返回一个全新的数组
     ex:
      var arr=["中国","美国","俄罗斯","加拿大"];
      要求：
      分别使用正数和负数两种方式
      取出美国和俄罗斯组成新的数组并打印出来
    5.splice()
      作用：允许从指定数组中，删除一部分元素，同时再添加另一部分元素
      语法：arr.splice(start,count,e1,e2,e3...);
          start:指定要添加或删除元素的起始下标位置
	  count:指定要删除的元素个数，取值为0表示不删除
	  e1:要增加的新元素
	  e2:要增加的新元素
	  e3:要增加的新元素
	返回值：返回一个由删除元素所组成的新数组
	注意：该函数会改变现有数组
    6.reverse()
      作用：将一个数组反转
      语法：数组名.reverse();
      注意：该函数会改变当前数组的内容
      ex:
        声明一个数组，内容随意
	倒序打印出该数组的内容
    7.sort()
      作用：排序，默认情况下，按照数组元素的Unicode码进行升序排序
      语法：数组名.sort();
      注意：该函数会改变当前数组的内容

      特殊:允许自定义排序函数，从而实现对数字的升序或降序的排序
      语法：数组名.sort(排序函数);
      ex:
        var arr=[12,6,4,72,115,89];
	//排序函数（升序）
	  function sortUp(a,b){
	     return a-b;
	  }
	//排序函数（降序）
	  function sortDown(a,b){
	     return b-a;
	  }
	//为数组指定排序函数
	  arr.sort(sortUp);
	  arr.sort(sortDown);
	原理：
	  1.指定排序函数，sortUp,定义两个参数，表示数组中的相邻的两个数字。
	  2.将排序函数指定给数组的sort()方法，数组会自动传递数据到sortUp()中，如果返回值>0的话，则交换量个数字的位置，否则不变。
	 /*
	 var arr=[12,23,17];
	  arr.sort(sortUp);
                          12 23
	   function sortUp(a,b){
	     return a-b;
	  }

          12  17  23
	  */
      使用匿名函数完成升序：
        arr.sort(function(a,b){return a-b});
      使用匿名函数完成降序：
        arr.sort(function(a,b){return b-a});

      匿名函数：是一个没有名称的函数
                只用一次函数时，可用匿名函数。

      练习：
        声明一个整数数组，随意定义数字
	1.在页面上添加两个按钮，一个为"升序"，一个为"降序"
	2.点击升序按钮时，数组按升序排序，并打印
	3.点击降序按钮时，数组按降序排序，并打印
         

      
 


	
	

 
