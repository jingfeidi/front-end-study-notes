1.函数-function
  1.什么是函数？
    函数，function,也称为方法（method）
    函数是一段预定义好，并可以反复执行的代码块
        预定义：提前定义好，并非马上执行
	代码块：可以包含多条可执行的语句
	反复执行：允许被多次调用
     函数-功能
     使用过的函数：
        parseInt(); ---将任意类型数据转换为整数
	parseFloat();
	Number();
	console.log();
	alert();
	document.write();
  2.定义和使用函数
    1.普通函数的声明和调用（无参无返回值）
      1.声明
        function 函数名(){
	   //函数体-若干条可执行的语句
	}
      2.函数调用
        在任意javascript合法的位置处通过 函数名(); 对函数进行调用
        ex: 
         1.直接调用
          sayHello();
         2.通过事件调用
          onclick="sayHello()"
         3.在函数里调用函数
          function 函数名(){
           sayHello();
	   函数2();
         }

	 练习：5分
	  1.封装一个函数名称calculate
	  2.函数体
	     1.弹出框中分两次输入数字
	     2.计算两个数字的和，并打印在控制台
	  3.在页面上，创建一个按钮，单击时，调用calculate()函数
    2.带参数函数的声明和调用
      1.声明
        function 函数名(参数列表){
	   //函数体
	}
	参数列表：可以声明1或多个参数，多个参数之间使用逗号隔开即可。
	声明函数时，声明的参数，称为“形参”。
      2.调用
        函数名(参数值列表);
	注意：尽量按照你声明函数的格式进行调用。
	调用函数时，传递的参数，称为“实参”
    3.带返回值的函数的声明和调用
      var res=parseInt("35.5");
      1.声明
        function 函数名(参数列表){
	   //函数体
	    return 值;
	}
	注意：最多只能返回一个值
      2.调用
        允许使用一个变量接收函数的返回值
	var result=函数名(参数);
      练习：
         定义一个可以接收三个数字的函数，函数体内返回三个数字中最大的数字。
2.函数-作用域
  1.作用域
    1.什么是作用域
      作用域表示的是变量或函数的可访问范围
      js中的作用域，分两种：
          1.函数作用域：只在某函数范围内有效
	  2.全局作用域：代码的任何位置都有效
    2.函数作用域中的变量
      又称为：局部变量，只有在声明的函数中有效
        ex: function test(){
	    var num=10;
	}
    3.全局作用域变量
      又称为：全局变量，一经声明，任何位置都能用
      1.不在function中声明的变量，为全局变量
      2.声明变量不使用var ,无论任何位置声明，都能全局使用（不推荐）
        注意:全局变量和局部变量冲突时，优先使用局部变量。
  2.声明提前  
     1.什么是声明提前
       js程序在正式执行之前，function声明的函数，会将所有 var 声明的变量，都预读(声明)到所有作用域的顶部，但赋值还是保留在原位。
  3.按值传递
    1.什么是按值传递
      基本数据类型的数据（number,string,bool）,在做参数时，都是按照“值传递”的方式进行传参的。
      值传递：真正传递参数时，实际上传递的是值的副本（复制出来的一个值），而不是原始值。
  4.函数作用域
    1.分为两种
       1.局部函数
         在某个function中声明的函数
       2.全局函数
         在最外层(<script>中)定义的函数就是全局函数，全局函数一经定义，任何位置都能调用。
    2.ECMAScript提供的全局函数
      1.parseInt()
      2.parseFloat()
      3.isNaN()
      4.encodeURI()
         URI:Uniform Resource Identifier(标识符)
	 URL:Uniform Resource Locator 路径
	 作用：对统一资源标识符进行编码，并返回编码后的字符串
	 所谓进行编码，就是将地址中的多字节的文字编成单字节的文字。（英文字母，数字单字节，汉字2~3字节）
      5.decodeURI()
         作用：对已编码的URI进行解码，并返回解码后的字符串
      6.encodeURIComponent()
        在encodeURI的基础上，允许对特殊字符进行编码
      7.decodeURIComponent() 解码特殊字符
      8.eval()
        作用：执行以字符串表示的js代码
	练习：
	   简易js执行器：请用户输入任意可执行的js代码或表达式，在程序中将其执行(eval)
  5.递归调用
      递归：在一个函数的内部再一次调用自己
      问题：
        求5*4*3*2*1  5的阶乘
	求10*9*8*7*6*5*4*3*2*1  10的阶乘
	5!=5*4!
	4!=4*3!
	3!=3*2!
	2!=2*1!
	1!=1*1
     通过一个函数，求数字n的阶乘
      function f(n){
         //计算数字n的阶乘
      }
      ex：f(5) 计算5的阶乘
          f(5)=5*f(4);
	  f(4)=4*f(3);
	  f(3)=3*f(2);
	  f(2)=2*f(1);
	  f(1)=1*1;  //边界条件,开始返回
      效率：
        在本次调用还未结束时，就开始下一次的调用，本次调用就会挂起，直到所有的调用都完成之后，才会依次返回，调用的次数越多，效率越低！
      练习：8分
        以下数列：斐波拉切数列
	    1,1,2,3,5,8,13,21,34,55......
	    已知：
	     1.该数列中的第一个数和第二个数都是1
	     2.从第3个数字开始，每个数字都是前两个数之和
	      f(1)=1
	      f(2)=1
	      f(3)=f(2)+f(1)
	      f(4)=f(3)+f(2)
	      ....
	      f(99)=f(98)+f(97)
	      f(n)
	    问题：
	     用一个函数 求该数列中第n个数的值
	     “通过函数f(n)计算数列中第n个数字的值”
3.分支结构
  1.if结构
    语法：
      if(条件){
        语句块;
      }
      注意：
        条件尽量时boolean类型，如果不是的，以下条件值，会当做false
	if(0){....}
	if(0.0){...}
	if(""){}
	if(undefined){}
	if(null){}
	if(NaN){}
	ex：
	  if(35){}  真
	if后的{}可以省略
	   省略后，if只控制下面的第一条语句
	   建议：不要省略if后的{}
  2.if...else...结构
    语法：
      if(条件){
        语句块
      }else{
        语句块
      }
  3.if...else if...else
    语法：
      if(条件1){
        语句块1;
      }else if(条件2){
        语句块2;
      }else if(条件3){
        语句块3;
      }else{
        语句块n;
      }

      练习：分三次从弹出框中输入年，月，日
            判断该日期是该年的第？天     8分钟
	    ex:
	      输入年：2017
	      输入月：3
	      输入日：5
	      2017年3月5日是2017年的第64天
	      2:平年28天 闰年29天
	      1,3,5,7,8,10,12 各31天
	      4,6,9,11 各30天

	      ex:
	      2017年9月20  ？？ 
	      先累加1-8月 ，再加上20天
	课后作业：
	写完上面练习的同学用
	switch...case 结构完成上面的练习（日期计算）


              



    











         
  

        
     
        
    
  
  