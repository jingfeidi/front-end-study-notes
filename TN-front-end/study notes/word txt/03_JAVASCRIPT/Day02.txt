1.数据类型
  1.数据类型的作用
    规定了数据在内存中所占的空间。

    bit:位
    byte:字节
    kb:千字节
    8bit=1byte 
    1024byte=1kb
    1024kb=1MB
    1024MB=1G
    1024G=1T
  2.数据类型的详解
    1.原始类型（基本类型）
      1.Number类型
        数字类型
	作用：可以表示32位（4byte）的整数，也可以表示64位(8byte)浮点数（俗称小数）
	整数：
	   1.十进制
	     由0-9是个数字组成，逢十进一
	     12 30 50
	   2.八进制
	     由0-7八个数字组成，逢八进一
	     var num=010; //八进制
	     console.log(num);8
	   3.十六进制
	     由0-9和A-F
	       A:10
	       B:11
	       C:12
	       D:13
	       E:14
	       F:15
	       十六进制以0x
	       console.log(0x10);
        浮点数：
	   小数点计数法：123.56
	   指数计数法：1.2e3    1.2*10的3次方
      2.string类型
        字符串
	 作用：表示一系列的文本字符数据,如：姓名，性别，地址，描述内容...字符串中的每个字符，都是由Unicode的字符，标点和数字组成
	 Unicode码：每个字符在计算机中都有一个唯一的码表示该字符。该码指的就是Unicode码。

	 查找一个字符的Unicode码方法：charCodeAt();

	   "李".charCodeAt(); //以十进制输出
	   "李".charCodeAt().toString(16);//以16进制输出

	 如何将Unicode码转为汉字？
	   比如：6768  ---》杨
	   var str="\u6768";
	   console.log(str);
         汉字的Unicode码的范围： \u转义字符
	   "\u4e00" ~ "\u9fa5"
	  
	  特殊字符需要用转义字符：
	    \n:换行
	    \t:制表符（缩进）
	    \": "
	    \': '
	    \\: \
	  注意：字符串在使用时，需要用""或''括起来。
	    ex:
	    var num1=12; //数字
	    var num2="12"; //字符串
	    var num3='12'; //字符串
      3.boolean类型
        布尔类型
	作用：在程序中表示真或假的结果
	取值：true 或 false 
	var isBig=true;
	var isRun=false;
	参与数字运算时，true可以当做1做运算，false可以当做0做运算。
	 var result=25+true; //结果26
      4.undefined
        作用：表示使用的数据不存在。
	场合:
	   1.声明变量但未赋值
	     var num;
	   2.试图访问对象的属性不存在

       




    2.引用类型

2.数据类型的转换
  1.隐式（自动）转换
    不同类型的数据在计算过程中自动进行换行
    1.数字+字符串：数字转换成字符串
      var num =15;
      var str="Hello";
      var result=num+str;//结果：15Hello
    2.数字+布尔：将布尔转换成数字,true=1,false=0
      var num=0;
      var isFun=true;
      var result=num+isFun;//结果：1
    3.字符串+布尔：将布尔转换成字符串
      var str="Hello";
      var isSun=true;
      var result=str+isSun;//结果：Hellotrue
    4.布尔+布尔：将布尔转换成数字
      true:1
      false:0
    问题：
      var num1=15;
      var num2=18;
      var str="Hello";
      1.str+num1+num2
        Hello1518
      2.num1+num2+str
        33Hello

      允许使用typeof()的函数检查变量的数据类型
      var num=12;
      console.log(typeof(num)); //Number

      var str="Hello World";
      console.log(typeof(str)); //string
  2.强制转换-转换函数
    1.toString()
      将任意类型转换成字符串
      语法：var res=变量.toString();
      ex：
        var num=15;
	var str=num.toString();
	console.log(typeof(str)); //string
    2.parseInt()
      将任意类型的数据转换为整数
      如果转换不成功，结果为：NaN(Not a Number)
      语法：
        var res=parseInt(数据);
	var num1="3a";
	var num2="3";
	问题：通过parseInt()转换下面两个变量值并输出
	  var str="123acb";
	  var str1="abc123";
    3.parseFloat()
      将任意类型数据转换为小数
      如果转换不成功，结果为NaN
      语法：
         var res=parseFloat(数据);
    4.Number()
      将任意类型数据转换为number
      注意：如果包含非法字符，则返回NaN
      语法：
        var res=Number(数据);
        ex:
	 var res1="123abc";
	 var num=Number(res1);
      练习：
         1.弹出一个提示框，输入金额，并保存在变量money中；
	    var money=prompt("请输入金额：")
	 2.将money+10,再输出+10后的结果
	 3.注释掉第2步，使用typeof检查money的类型
	 4.将money转换为一个数字，再+10打印输出
3.运算符和表达式
  1.什么是表达式？
    由运算符连接操作数所组成的式子就是表达式
    任何一个表达式都会有结果
    ex:
      15+18
      var x=15;
      20-12 
  2.运算符
    1.算术运算符
       +,-,*,/,%,++,--
       5%2 结果1
       ++:自增运算符，只做+1操作
          ++在前：先自增，再赋值
	  ++在后：先赋值，再自增
	  var num=5;
	  console.log(num++); //打印5,变为6
	  console.log(++num); //变为7,打印7
       --:自减运算符，只做-1操作
       练习：
         var num=5;
	          5    (6) 6   6 (7)   (8) 8
	 var res=num + ++num + num++ + ++num + num++ + ++num;
	 8 (9)   (10) 10
	 
	 结果：43
    2.关系运算符（比较运算符）
      >,<,>=,<=,==,!=,===,!==
      运算结果为：boolean类型（true,false）
      问题：
        1. 5>"10"   :false
           关系运算符两端，只要有一个是number的话，另外一个会隐式转换为number(使用Number()),再进行比较。
	2."5">"10"  :true  比较Unicode码
	   "5".charCodeAt(); 53
	   "10".charCodeAt(); 49
	  
	3."张三丰">"张无忌" 
	   关系运算符两端，如果都是string的话，则比较每位字符的Unicode码，以Unicode码不相等的两个字符的比较结果作为整体结果。
	   张 三 丰 19977
	   张 无 忌 26080
	4."3a">10 
	   Number("3a") -->NaN
           注意：
	     NaN与任何一个数据做比较运算时，结果是false.
	     console.log("3a"<10);
	     console.log("3a"==10);
	   isNaN()函数
	     语法：isNaN(数据);
	     作用：判断指定数据是否为非数字，如果不是数字，返回值为true，是数字的话返回值为false.
	     console.log(isNaN("3a")); true
	     console.log(isNaN("3")); false
    3.逻辑运算符
      !,&&,||

      !:取反  
      &&：并且，关联的两个条件都为true时，整个表达式结果为true。
      ||：或者，关联的两个条件，只要有一个为true，整个表达式结果为true。
      短路逻辑：（判断）
         短路逻辑&&：
	     当第一个条件为false时，整体表达式结果为false,不需要判断第二个条件

	     练习：prompt
	     1.输入一个数字，并保存在a中，
	     2.输入一个数字，并保存在b中，
	     3.判断a>b ?并给出提示"a大于b"
	     4.判断a<b ?打印出a的值，打印出b的值，再打印出"a小于b"
            
	 短路逻辑||：
	     当第一个条件为true时，就不再执行后续的表达式，整体结果为true.
	     当第一个条件为false时，继续执行第二个条件或操作。
	  练习：
	     判断闰年
	     1.从弹出框输入一个年份信息，保存在year中
	       闰年：
	          能被4整除但不能被100整除  或  能被400整除的年份为闰年。
	     2.判断year年是否为闰年，并给出提示
	       输出提示格式如下：
	         2000年是闰年
		 20001年不是闰年
    4.位运算符
      <<,>>,&,|,^

      右移是把数变小，左移是把数变大
      &：按位与，判断奇偶性
         任意数字与1做按位与，结果为1，则为奇数，结果为0，则为偶数。
	 var num=323;
	 var res=num & 1;
	 console.log(res);

      |：按位或，对小数取整
         将任意小数与0做按位或，结果则取整数部分
	 var num1=123.456;
	 var res1=num1 | 0;
	 console.log(res1);

      ^：按位异或，用于交换两个数字
         var a=15;
	 var b=18;
	   a=a^b;
	   b=b^a;
	   a=a^b;
	  二进制：相同则为0，不同则为1
    5.赋值运算符和扩展运算符
      1.赋值运算符 =
      2.扩展运算符
        +=,-=,*=,/=,%=,^=.......
	a+=b; --->a=a+b;
	a+=1; --->a=a+1,a++,++a
	a^=b; --->a=a^b;
   6.条件（三目）运算符
     单目（一元）运算符：只需要一个操作数或表达式
     ++，--，！
     a++;

     双目（二元）运算符：需要两个操作数或表达式
     +，-，*，/，% ....

     三目（三元）运算符：需要三个操作数或表达式
        条件表达式 ？ 表达式1 ：表达式2
        先判断条件表达式的值，
	  如果条件为true,则执行表达式1的操作
	  如果条件为false,则执行表达式2的操作
	练习：
	  从弹出框输入考试成绩
	    如果成绩大于60，则输出及格，否则输出不及格。
        课后作业：
	    1.输入一个考试成绩
	    2.判断成绩如果==100输出"奖励1000元"
	    3.如果成绩>=90,输出"奖励100元"
	    4.如果成绩>=70,输出"奖励10元"
	    5.否则，输出"倒罚100元"

	
     
     



        




	     


    
    
    